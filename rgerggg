ohoho 30
test 10

// ==UserScript==
// @name         GitHub Restore Button for File History (v5.0 – Invisible Restore)
// @namespace    http://tampermonkey.net/
// @version      5.0
// @description  commit-იდან ფაილის აღდგენა და რედაქტორში ჩასმა სრულად უხილავი პროცესით. არ ხდება გადამისამართებები.
// @author       Khvicha
// @match        https://github.com/*
// @grant        GM_setClipboard
// ==/UserScript==


(function () {
    'use strict';


    let lastUrl = location.href;


    /*───────────── Helper ─────────────*/
    function getHistoryInfo() {
        const p = location.pathname.split('/');
        if (p.length < 6) return null;
        return { owner: p[1], repo: p[2], branch: p[4], filepath: p.slice(5).join('/') };
    }


    /*──────── 1. History page ────────*/
    function addRestoreButtons() {
        const info = getHistoryInfo();
        if (!info) return;


        document.querySelectorAll('li[data-commit-link]').forEach(li => {
            const sha = li.getAttribute('data-commit-link')?.match(/\/commit\/([a-f0-9]+)/)?.[1];
            if (!sha || li.querySelector('.restore-btn')) return;


            const group = li.querySelector('[data-testid="commit-row-view-code"]')?.parentNode;
            if (!group) return;


            const btn = document.createElement('a');
            btn.href = '#';
            btn.className = 'Button Button--iconOnly Button--invisible Button--small restore-btn';
            btn.style.marginLeft = '4px';
            btn.setAttribute('aria-label', 'აღადგინე ეს ფაილი');
            btn.innerHTML = `
                <svg aria-hidden="true" class="octicon octicon-history" viewBox="0 0 16 16"
                     width="16" height="16" fill="currentColor" style="vertical-align:text-bottom">
                  <path d="m.427 1.927 1.215 1.215a8.002 8.002 0 1 1-1.6 5.685.75.75
                           0 1 1 1.493-.154 6.5 6.5 0 1 0 1.18-4.458l1.358 1.358A.25.25
                           0 0 1 3.896 6H.25A.25.25 0 0 1 0 5.75V2.104a.25.25 0 0 1
                           .427-.177ZM7.75 4a.75.75 0 0 1 .75.75v2.992l2.028.812a.75.75
                           0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5A.75.75
                           0 0 1 7.75 4Z"></path>
                </svg>`;


            btn.onclick = e => {
                e.preventDefault();


                const rawURL = `https://raw.githubusercontent.com/${info.owner}/${info.repo}/${sha}/${info.filepath}`;


                fetch(rawURL)
                    .then(r => {
                        if (!r.ok) throw new Error('ფაილის შინაარსი ვერ მოიძებნა.');
                        return r.text();
                    })
                    .then(content => {
                        // შევინახოთ შინაარსი localStorage-ში
                        localStorage.setItem('restore_file_content', content);


                        // გადავიდეთ edit გვერდზე დაუყოვნებლივ
                        const editURL = `https://github.com/${info.owner}/${info.repo}/edit/${info.branch}/${info.filepath}`;
                        window.location.href = editURL;
                    })
                    .catch(() => {
                        alert('შეცდომა: ვერ მივიღე commit-ის ფაილის შინაარსი.');
                    });
            };


            const stdBtns = group.querySelectorAll('a.Button, button.Button');
            (stdBtns.length ? stdBtns[stdBtns.length - 1] : group).after(btn);
        });
    }


    /*──────── 2. Edit page ──────────*/
    function pasteToEditor() {
        const content = localStorage.getItem('restore_file_content');
        if (!content) return;


        const tryCM = () => {
            const cm = document.querySelector('.cm-content[contenteditable="true"]');
            if (!cm) return false;
            cm.focus();
            document.execCommand('selectAll');
            document.execCommand('insertText', false, content);
            localStorage.removeItem('restore_file_content');
            return true;
        };


        const tryTA = () => {
            const ta = document.querySelector('textarea#editor');
            if (!ta) return false;
            ta.value = content;
            ta.dispatchEvent(new Event('input', { bubbles: true }));
            localStorage.removeItem('restore_file_content');
            return true;
        };


        let tries = 0;
        const iv = setInterval(() => {
            if (tryCM() || tryTA() || ++tries > 10) clearInterval(iv);
        }, 300);
    }


    /*──────── URL ცვლილებების მონიტორინგი ─────────*/


    function handlePage() {
        if (/\/commits\/[^\/]+\/.+/.test(location.pathname)) {
            addRestoreButtons();
        } else if (/\/edit\//.test(location.pathname)) {
            pasteToEditor();
        }
    }


    // პირველადი გაშვება
    handlePage();


    // URL ცვლილების კონტროლი (SPA მხარდაჭერა)
    const observer = new MutationObserver(() => {
        if (location.href !== lastUrl) {
            lastUrl = location.href;
            setTimeout(handlePage, 800);
        }
    });


    observer.observe(document.body, { childList: true, subtree: true });


})();
